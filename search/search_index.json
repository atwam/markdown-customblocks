{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Customblocks for Markdown Customblocks is an extension for Python-Markdown that settles a common markup for parametrizable and nestable components whose output can be redefined by means of a simple Python function. Many off-the-shelf components are provided such as div-containers, admonitions, figures, link cards, maps... and some embeded widgets from common sites (youtube, vimeo, twitter, facebook, instagram, goteo, verkami...) It also includes convenience tools to ease component definition: hyperscript html generation, cached page fetching and metadata page extraction. Installation and setup To install: $ pip install markdown-customblocks And then activate it as any other Markdown extension. From command line: $ markdown -x customblocks ... In Python code: import markdown md = markdown . Markdown ( extensions = [ \"customblocks\" ]) md . convert ( markdowncontent ) In Pelican config: MARKDOWN = { 'extensions' : [ 'customblocks' , ], } For MkDocs , add this to mkdocs.yml : markdown_extensions : - customblocks If you need to specify additional parameters for the extension, refer to the documentation of your generator. Basic usage Customblocks extension parses markup structures like this one: ::: mytype \"value 1\" param2=value2 Indented content Then, the extension delegates HTML generation to a Python function ( generator ) which is bound to the type name, mytype in the example. The extension provides many predefined generators and you might define your own for new types or redefine existing ones to suit your needs. If no generator is bound to the type name, the div-container generator is used as fallback, generating this: < div class = \"mytype value-1\" param2 = \"value2\" > < p > Indented code </ p > </ div > But we could bind mytype to the following generator: def mygenerator ( ctx , param1 , param2 ): return f \"\"\"<div attrib1=\" { param1 } \" attrib2=\" { param2 } \"> { ctx . content } </div>\"\"\" That would generate this HTML: < div attrib1 = \"value 1\" attrib2 = \"value2\" > Indented Content </ div > Warning Notice that this is a silly example. It will work for simple params and text content, but it does not escape them properly. The hyperscript tool can be used to make this painless. Built-in generators The extension provides the following predefined generators: container : A div element with arbitrary classes, attributes and content. This is the default when no type matches. admonition : Admonitions, boxes for notes, warnings... (quite similar to the standard extra extension ). It is bound to types note , info , error , warning .... figure : Full featured figures with captions, lightbox... map : Maps from OpenStreetMaps.org linkcard : External link cards (like Facebook and Twitter do, when you post a link) youtube : Embeded videos from youtube... vimeo : Embeded videos from vimeo... twitter : Embeded tweets facebook : Embeded post from facebook... instagram : Embeded post from instagram... verkami : Fund raising project widget in [Verkami] goteo : Fund raising project widget in [Goteo] If you wonder why this extension exists and why the design choices were taken like this, read the motivation . We all stand on giants' shoulders so take a look at the long list of markdown extensions and other software that inspired and influenced ideas for this extension. Kudos for all of them. General markup syntax This is a more complete example of markup: ::: mytype param1 key1=value1 \"other param\" key2='value2 with words' flag1 noflag2 Indented **content** The block ends whenever the indentation stops This unindented line is not considered part of the block The headline: The line starting with ::: is the headline . It specifies, first, the block type ( mytype ) followed by a set of values that will be passed to the generator as parameters. Block type: The type is used to select the generator function. If there is no generator bound to the type, the div-container generator, will be used by default. Quotes: Muti-word values can be passed by using either single or double quotes. You can skip quotes if your value is single worded. Explicit keywords: Also some values may target an explicit parameter with a key . This works as follows: from the available block parameters, values with a key are set first, then the remaining unset parameters are filled by position. Flags (bools): Boolean parameters (flags) can be set by just adding a value with the name of the flag, like flag1 in the example. And they can be unset by adding the name with a no prefix, like noflag2 in the example. Content: After the headline , several lines of indented content may follow. The content ends with the very first non-emtpy line back on the previous indentation. Indentation is removed from the content for the generator to process it. A block type may choose to interpret this content as markdown as well. So you can have nested blocks by adding extra indentation. For example: ::: recipe # Sweet water ::: ingredients \"4 persons\" - two spons of suggar - a glass of tap water ::: mealphoto sweetwater.jpg Looks gorgeus! Drop the suggar into the glass. Stir. Note A closing ::: tag is optional. For most cases, indentation should be enough, visually, and functionally. Seldomly, it is necessary like in the following markdown to split the mealphoto content from a code block which is also indented. ::: mealphoto sweetwater.jpg Looks gorgeus! ::: This is a code block by indentation Further reading Full documentation Code Release History Road map","title":"First steps"},{"location":"#customblocks-for-markdown","text":"Customblocks is an extension for Python-Markdown that settles a common markup for parametrizable and nestable components whose output can be redefined by means of a simple Python function. Many off-the-shelf components are provided such as div-containers, admonitions, figures, link cards, maps... and some embeded widgets from common sites (youtube, vimeo, twitter, facebook, instagram, goteo, verkami...) It also includes convenience tools to ease component definition: hyperscript html generation, cached page fetching and metadata page extraction.","title":"Customblocks for Markdown"},{"location":"#installation-and-setup","text":"To install: $ pip install markdown-customblocks And then activate it as any other Markdown extension. From command line: $ markdown -x customblocks ... In Python code: import markdown md = markdown . Markdown ( extensions = [ \"customblocks\" ]) md . convert ( markdowncontent ) In Pelican config: MARKDOWN = { 'extensions' : [ 'customblocks' , ], } For MkDocs , add this to mkdocs.yml : markdown_extensions : - customblocks If you need to specify additional parameters for the extension, refer to the documentation of your generator.","title":"Installation and setup"},{"location":"#basic-usage","text":"Customblocks extension parses markup structures like this one: ::: mytype \"value 1\" param2=value2 Indented content Then, the extension delegates HTML generation to a Python function ( generator ) which is bound to the type name, mytype in the example. The extension provides many predefined generators and you might define your own for new types or redefine existing ones to suit your needs. If no generator is bound to the type name, the div-container generator is used as fallback, generating this: < div class = \"mytype value-1\" param2 = \"value2\" > < p > Indented code </ p > </ div > But we could bind mytype to the following generator: def mygenerator ( ctx , param1 , param2 ): return f \"\"\"<div attrib1=\" { param1 } \" attrib2=\" { param2 } \"> { ctx . content } </div>\"\"\" That would generate this HTML: < div attrib1 = \"value 1\" attrib2 = \"value2\" > Indented Content </ div > Warning Notice that this is a silly example. It will work for simple params and text content, but it does not escape them properly. The hyperscript tool can be used to make this painless.","title":"Basic usage"},{"location":"#built-in-generators","text":"The extension provides the following predefined generators: container : A div element with arbitrary classes, attributes and content. This is the default when no type matches. admonition : Admonitions, boxes for notes, warnings... (quite similar to the standard extra extension ). It is bound to types note , info , error , warning .... figure : Full featured figures with captions, lightbox... map : Maps from OpenStreetMaps.org linkcard : External link cards (like Facebook and Twitter do, when you post a link) youtube : Embeded videos from youtube... vimeo : Embeded videos from vimeo... twitter : Embeded tweets facebook : Embeded post from facebook... instagram : Embeded post from instagram... verkami : Fund raising project widget in [Verkami] goteo : Fund raising project widget in [Goteo] If you wonder why this extension exists and why the design choices were taken like this, read the motivation . We all stand on giants' shoulders so take a look at the long list of markdown extensions and other software that inspired and influenced ideas for this extension. Kudos for all of them.","title":"Built-in generators"},{"location":"#general-markup-syntax","text":"This is a more complete example of markup: ::: mytype param1 key1=value1 \"other param\" key2='value2 with words' flag1 noflag2 Indented **content** The block ends whenever the indentation stops This unindented line is not considered part of the block The headline: The line starting with ::: is the headline . It specifies, first, the block type ( mytype ) followed by a set of values that will be passed to the generator as parameters. Block type: The type is used to select the generator function. If there is no generator bound to the type, the div-container generator, will be used by default. Quotes: Muti-word values can be passed by using either single or double quotes. You can skip quotes if your value is single worded. Explicit keywords: Also some values may target an explicit parameter with a key . This works as follows: from the available block parameters, values with a key are set first, then the remaining unset parameters are filled by position. Flags (bools): Boolean parameters (flags) can be set by just adding a value with the name of the flag, like flag1 in the example. And they can be unset by adding the name with a no prefix, like noflag2 in the example. Content: After the headline , several lines of indented content may follow. The content ends with the very first non-emtpy line back on the previous indentation. Indentation is removed from the content for the generator to process it. A block type may choose to interpret this content as markdown as well. So you can have nested blocks by adding extra indentation. For example: ::: recipe # Sweet water ::: ingredients \"4 persons\" - two spons of suggar - a glass of tap water ::: mealphoto sweetwater.jpg Looks gorgeus! Drop the suggar into the glass. Stir. Note A closing ::: tag is optional. For most cases, indentation should be enough, visually, and functionally. Seldomly, it is necessary like in the following markdown to split the mealphoto content from a code block which is also indented. ::: mealphoto sweetwater.jpg Looks gorgeus! ::: This is a code block by indentation","title":"General markup syntax"},{"location":"#further-reading","text":"Full documentation Code Release History Road map","title":"Further reading"},{"location":"CHANGES/","text":"Release history markdown-customblocks 1.3.0 (2022-11-06) New documentation based on mkdocs New block types: map : to embed OSM maps facebook : to embed facebook posts (draft: still privacy invasive) instagram : to embed instagram posts (draft: still privacy invasive) linkcard : Links are openened in a new tab/window markdown-customblocks 1.2.0 (2022-03-08) Figures open the image in a new window Figures lightbox visualization (requires some css) GDPR friendly embeds: youtube: Use youtube-nocookie.com to avoid youtube cookies vimeo: Use dnt=1 option to avoid vimeo cookies markdown-customblocks 1.1.4 (2022-03-05) FIX: match trailing spaces after the header. Fixes #6 markdown-customblocks 1.1.3 (2022-02-22) Metadata fix: The license is Affero not MIT markdown-customblocks 1.1.2 (2022-02-22) FIX: youtube custom classes were not added (PR #05, Alexey Leshchenko @leshchenko1979, thanks!) FIX: linkcard: link-card-site-icon class was set twice workflows for continuous integration and release markdown-customblocks 1.1.1 (2020-08-08) documentation fixes markdown-customblocks 1.1.0 (2020-08-08) utils.Fetcher : Helper for catched downloads utils.PageInfo : Page information retrieval helper utils.E : Helper to generate HTML using hyperscript idiom utils.Markdown : Helper to include markdown in hyperscript linkcard : Example style emulating Wordpress' embedded link linkcard : Explicit image, description, title... linkcard : Fix: relative links to images and icons linkcard : Removed half implemented embedimage flag twitter : Cache twitter info downloads markdown-customblocks 1.0.0 (2020-06-27) Register a generator with a string like 'module.submodule:function' Support single quoted values markdown-customblocks 0.3.0 (2020-06-27) Provide ctx.config from extension_configs.customblocks.config New generators: vimeo, verkami, goteo admonition: title should be a <p> not a <div> for ReST styles to work youtube: responsive/fluid sizing documented all generators markdown-customblocks 0.2.0 (2020-06-25) Improve documentation (parameter passing, toc...) Provide ctx.metadata to access Markdown.Meta (from extra.meta , full_yaml_metadata ... extensions) figure : link to the image markdown-customblocks 0.1.0 (2020-06-23) First public version Support for function based generators Default generator: container Example generators: admonition, twitter, youtube, figure, linkcard","title":"Release History"},{"location":"CHANGES/#release-history","text":"","title":"Release history"},{"location":"CHANGES/#markdown-customblocks-130-2022-11-06","text":"New documentation based on mkdocs New block types: map : to embed OSM maps facebook : to embed facebook posts (draft: still privacy invasive) instagram : to embed instagram posts (draft: still privacy invasive) linkcard : Links are openened in a new tab/window","title":"markdown-customblocks 1.3.0 (2022-11-06)"},{"location":"CHANGES/#markdown-customblocks-120-2022-03-08","text":"Figures open the image in a new window Figures lightbox visualization (requires some css) GDPR friendly embeds: youtube: Use youtube-nocookie.com to avoid youtube cookies vimeo: Use dnt=1 option to avoid vimeo cookies","title":"markdown-customblocks 1.2.0 (2022-03-08)"},{"location":"CHANGES/#markdown-customblocks-114-2022-03-05","text":"FIX: match trailing spaces after the header. Fixes #6","title":"markdown-customblocks 1.1.4 (2022-03-05)"},{"location":"CHANGES/#markdown-customblocks-113-2022-02-22","text":"Metadata fix: The license is Affero not MIT","title":"markdown-customblocks 1.1.3 (2022-02-22)"},{"location":"CHANGES/#markdown-customblocks-112-2022-02-22","text":"FIX: youtube custom classes were not added (PR #05, Alexey Leshchenko @leshchenko1979, thanks!) FIX: linkcard: link-card-site-icon class was set twice workflows for continuous integration and release","title":"markdown-customblocks 1.1.2 (2022-02-22)"},{"location":"CHANGES/#markdown-customblocks-111-2020-08-08","text":"documentation fixes","title":"markdown-customblocks 1.1.1 (2020-08-08)"},{"location":"CHANGES/#markdown-customblocks-110-2020-08-08","text":"utils.Fetcher : Helper for catched downloads utils.PageInfo : Page information retrieval helper utils.E : Helper to generate HTML using hyperscript idiom utils.Markdown : Helper to include markdown in hyperscript linkcard : Example style emulating Wordpress' embedded link linkcard : Explicit image, description, title... linkcard : Fix: relative links to images and icons linkcard : Removed half implemented embedimage flag twitter : Cache twitter info downloads","title":"markdown-customblocks 1.1.0 (2020-08-08)"},{"location":"CHANGES/#markdown-customblocks-100-2020-06-27","text":"Register a generator with a string like 'module.submodule:function' Support single quoted values","title":"markdown-customblocks 1.0.0 (2020-06-27)"},{"location":"CHANGES/#markdown-customblocks-030-2020-06-27","text":"Provide ctx.config from extension_configs.customblocks.config New generators: vimeo, verkami, goteo admonition: title should be a <p> not a <div> for ReST styles to work youtube: responsive/fluid sizing documented all generators","title":"markdown-customblocks 0.3.0 (2020-06-27)"},{"location":"CHANGES/#markdown-customblocks-020-2020-06-25","text":"Improve documentation (parameter passing, toc...) Provide ctx.metadata to access Markdown.Meta (from extra.meta , full_yaml_metadata ... extensions) figure : link to the image","title":"markdown-customblocks 0.2.0 (2020-06-25)"},{"location":"CHANGES/#markdown-customblocks-010-2020-06-23","text":"First public version Support for function based generators Default generator: container Example generators: admonition, twitter, youtube, figure, linkcard","title":"markdown-customblocks 0.1.0 (2020-06-23)"},{"location":"TODO/","text":"Road map Common infrastructure Flags: coerce to bool? Annotations: coerce to any type Generators Linkcard: Mediawiki: Short description and main image: https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts|pageimages&exintro=&explaintext=&titles=Sant%20Joan%20Desp%C3%AD Youtube: Take aspect ratio and sizes from Youtube api Use covers https://i.ytimg.com/vi/{code}/hqdefault.jpg Twitter Privacy safe mode Instagram Map: Adding parameters peertube < iframe title = \"Onion Rice from 1977: The Instruction the Recipe Submitter gives is Priceless!\" src = \"https://tilvids.com/videos/embed/bb6057d2-427b-4c31-9b8c-0a8c7d0a29c9?start=4m51s&amp;stop=5m1s&amp;loop=1&amp;autoplay=1&amp;muted=1\" allowfullscreen = \"\" sandbox = \"allow-same-origin allow-scripts allow-popups\" width = \"560\" height = \"315\" frameborder = \"0\" ></ iframe > Figure flags: no flag Un modified url local (when remote url) download place it on a given dir set url to local path inline download detect mime type compute base 64 set url to data url thumb download generate a thumb place the thumb on thumb dir when combined with 'inline' url to the local path when combined with 'local' link to the image [x] lightbox sized Helpers Fetcher: configurable cache dir file name too long handle connection errors","title":"Road Map"},{"location":"TODO/#road-map","text":"","title":"Road map"},{"location":"TODO/#common-infrastructure","text":"Flags: coerce to bool? Annotations: coerce to any type","title":"Common infrastructure"},{"location":"TODO/#generators","text":"Linkcard: Mediawiki: Short description and main image: https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts|pageimages&exintro=&explaintext=&titles=Sant%20Joan%20Desp%C3%AD Youtube: Take aspect ratio and sizes from Youtube api Use covers https://i.ytimg.com/vi/{code}/hqdefault.jpg Twitter Privacy safe mode Instagram Map: Adding parameters peertube < iframe title = \"Onion Rice from 1977: The Instruction the Recipe Submitter gives is Priceless!\" src = \"https://tilvids.com/videos/embed/bb6057d2-427b-4c31-9b8c-0a8c7d0a29c9?start=4m51s&amp;stop=5m1s&amp;loop=1&amp;autoplay=1&amp;muted=1\" allowfullscreen = \"\" sandbox = \"allow-same-origin allow-scripts allow-popups\" width = \"560\" height = \"315\" frameborder = \"0\" ></ iframe > Figure flags: no flag Un modified url local (when remote url) download place it on a given dir set url to local path inline download detect mime type compute base 64 set url to data url thumb download generate a thumb place the thumb on thumb dir when combined with 'inline' url to the local path when combined with 'local' link to the image [x] lightbox sized","title":"Generators"},{"location":"TODO/#helpers","text":"Fetcher: configurable cache dir file name too long handle connection errors","title":"Helpers"},{"location":"defining-generators/","text":"Implementing a generator Binding to a typename A block type can be defined just by hooking the generator function to the type. In Python: import markdown md = markdown . Markdown ( extensions = [ \"customblocks\" ], extension_configs = dict ( customblocks = { # by direct symbol reference 'mytype' : myparentmodule . mymodule . mytype , # or using import strings (notice the colon) 'aka_mytype' : 'myparentmodule.mymodule:mytype' , ... } ), ) md . convert ( markdowncontent ) In Pelican config: MARKDOWN = { ... 'extensions_configs' : { 'customblocks' : { 'generators' : { # by direct symbol reference 'mytype' : myparentmodule . mymodule . mytype , # or using import strings (notice the colon) 'aka_mytype' : 'myparentmodule.mymodule:mytype' , } }, }, } Parameter mapping The signature of the generator will determine the attributes taken from the headline. Say you have a generator with the following signature: def mytype ( ctx , param1 , myflag : bool , param2 , param3 , yourflag = True , param4 = 'default2' ): ... Function parameters are filled using values parsed from head line . Unlike Python, you can interleave in the headline values with and without keys. They are resolved as follows: Context: The ctx parameter is ignored for parameter matching. See bellow on how to use it. Explicit keys: Explicit keys in the headline matching function parameters not defined as ' positional only ' are matched first. Flag: Generator arguments annotated as bool (like example's myflag ), or defaulting to True or False , (like example's yourflag ) are considered flags, so: When a keyless value matches a flag name in the generator ( myflag ), True is passed When it matches the flag name prefixed with no ( nomyflag ), False is passed Positional: Keyless values in the headline are assigned one-to-one by position order to the unassigned parameters, (excluding those defined as ' keyword-only '). Varidics: If the signature contains key ( **kwds ) or positional ( *args ) varidic variables, any remaining key and keyless values from the headline are assigned to them Unmatched function parameters: If they have no default value, will be warned and assigned an empty string. Unmatched headline parameters: They will be warned and ignored. The context object Regarding the ctx parameter, it is the context. If you don't use it, you can skip it. But it is useful if you want to receive some context parameters like: ctx.parent : the parent node ctx.content : the indented part of the block, with the indentation removed ctx.parser : the markdown parser, can be used to parse the inner content or any other markdown code ctx.type : the type of the block If you reuse the same function for different types, this is how you diferentiate them ctx.metadata : A dictionary with metadata from your metadata plugin. ctx.config : A dictionary passed from extension_configs.customblocks.config Producing HTML A generator can use several strategies to generate content: Return an html string (single root node) Return a markdown.etree Element object Manipulate ctx.parent to add the content and return None In order to construct an ElementTree, we recommend using the Hyperscript utility . Resulting code will be more compact and readable and makes proper escaping when injecting values. Generator helpers Common code has been extracted from predefined generators. If you need this functionality you are encouraged to use them. Hyperscript: to generate html PageInfo: to extract metadata from a webpage Fetcher: to download resources with file based cache Hyperscript You can generate html with strings or using etree ; but there is a more elegant option. Hyperscript is the idea of writing code that generates html/xml as nested function calls that look like the actual xml structure. This can be done by using the customblocks.utils.E function which has this signature: def E(tag, *children, **attributes): ... tag is the name of the tag ( pre , div , strong ...). An empty string is equivalent to div . It can have appended several .classname that will be added as element class. Any keyword parameter will be taken as element attributes. You can use the special _class attribute to append more classes. Notice the underline, as class is a reserved word in Python. children takes the keyless parameters and they can be: None : then it will be ignored dict : it will be merged with the attributes str : it will be added as text etree.Element : it will be added as child node customblocks.utils.Markdown : will append parsed markdown (see below) Any tuple , list or iterable: will add each item following previous rules from customblocks.utils import E , Markdown def mygenerator ( ctx , image ): return ( E ( '.mytype' , dict ( style = \"width: 30%; align: left\" ), E ( 'a' , dict ( href = image ), E ( 'img' , src = image ), ), Markdown ( ctx . content , ctx . parser ), ) ) PageInfo utils.pageinfo.PageInfo is a class that retrieves meta information from html pages by means of its properties. Properties are computed lazily and use cache. Once you get one property for a given page, later uses will have little impact. Any attribute you explicit on the constructor will override the ones derived from actual content. info = PageInfo ( html , url = 'http://site.com/path/page.html' ) info . sitename # the name of the site (meta og:site_name or the domain info . siteicon # the favicon or similar info . siteurl # the base url of the site (not the page) info . title # page title (from og:title meta or `<title>` content) info . description # short description (from og:description or twitter:description) info . image # featured image (from og:image or twitter:image, or site image) Fetcher A fetcher object is a wrapper around the requests library that uses caching to avoid downloading once and again remote resource each time you compile the markdown file. The first time a resource is succesfully downloaded by a fetcher the request response is stored in the provided folder in a yaml file which has the mangled url as name. Successive tries to download it just take the content of that file to construct a query. from customblocks.utils import Fetcher fetcher = Fetcher ( 'mycachedir' ) response = fetcher . get ( 'https://canvoki.net/codder' ) # to force next call fetcher . remove ( 'https://canvoki.net/codder' )","title":"Defining generators"},{"location":"defining-generators/#implementing-a-generator","text":"","title":"Implementing a generator"},{"location":"defining-generators/#binding-to-a-typename","text":"A block type can be defined just by hooking the generator function to the type. In Python: import markdown md = markdown . Markdown ( extensions = [ \"customblocks\" ], extension_configs = dict ( customblocks = { # by direct symbol reference 'mytype' : myparentmodule . mymodule . mytype , # or using import strings (notice the colon) 'aka_mytype' : 'myparentmodule.mymodule:mytype' , ... } ), ) md . convert ( markdowncontent ) In Pelican config: MARKDOWN = { ... 'extensions_configs' : { 'customblocks' : { 'generators' : { # by direct symbol reference 'mytype' : myparentmodule . mymodule . mytype , # or using import strings (notice the colon) 'aka_mytype' : 'myparentmodule.mymodule:mytype' , } }, }, }","title":"Binding to a typename"},{"location":"defining-generators/#parameter-mapping","text":"The signature of the generator will determine the attributes taken from the headline. Say you have a generator with the following signature: def mytype ( ctx , param1 , myflag : bool , param2 , param3 , yourflag = True , param4 = 'default2' ): ... Function parameters are filled using values parsed from head line . Unlike Python, you can interleave in the headline values with and without keys. They are resolved as follows: Context: The ctx parameter is ignored for parameter matching. See bellow on how to use it. Explicit keys: Explicit keys in the headline matching function parameters not defined as ' positional only ' are matched first. Flag: Generator arguments annotated as bool (like example's myflag ), or defaulting to True or False , (like example's yourflag ) are considered flags, so: When a keyless value matches a flag name in the generator ( myflag ), True is passed When it matches the flag name prefixed with no ( nomyflag ), False is passed Positional: Keyless values in the headline are assigned one-to-one by position order to the unassigned parameters, (excluding those defined as ' keyword-only '). Varidics: If the signature contains key ( **kwds ) or positional ( *args ) varidic variables, any remaining key and keyless values from the headline are assigned to them Unmatched function parameters: If they have no default value, will be warned and assigned an empty string. Unmatched headline parameters: They will be warned and ignored.","title":"Parameter mapping"},{"location":"defining-generators/#the-context-object","text":"Regarding the ctx parameter, it is the context. If you don't use it, you can skip it. But it is useful if you want to receive some context parameters like: ctx.parent : the parent node ctx.content : the indented part of the block, with the indentation removed ctx.parser : the markdown parser, can be used to parse the inner content or any other markdown code ctx.type : the type of the block If you reuse the same function for different types, this is how you diferentiate them ctx.metadata : A dictionary with metadata from your metadata plugin. ctx.config : A dictionary passed from extension_configs.customblocks.config","title":"The context object"},{"location":"defining-generators/#producing-html","text":"A generator can use several strategies to generate content: Return an html string (single root node) Return a markdown.etree Element object Manipulate ctx.parent to add the content and return None In order to construct an ElementTree, we recommend using the Hyperscript utility . Resulting code will be more compact and readable and makes proper escaping when injecting values.","title":"Producing HTML"},{"location":"defining-generators/#generator-helpers","text":"Common code has been extracted from predefined generators. If you need this functionality you are encouraged to use them. Hyperscript: to generate html PageInfo: to extract metadata from a webpage Fetcher: to download resources with file based cache","title":"Generator helpers"},{"location":"defining-generators/#hyperscript","text":"You can generate html with strings or using etree ; but there is a more elegant option. Hyperscript is the idea of writing code that generates html/xml as nested function calls that look like the actual xml structure. This can be done by using the customblocks.utils.E function which has this signature: def E(tag, *children, **attributes): ... tag is the name of the tag ( pre , div , strong ...). An empty string is equivalent to div . It can have appended several .classname that will be added as element class. Any keyword parameter will be taken as element attributes. You can use the special _class attribute to append more classes. Notice the underline, as class is a reserved word in Python. children takes the keyless parameters and they can be: None : then it will be ignored dict : it will be merged with the attributes str : it will be added as text etree.Element : it will be added as child node customblocks.utils.Markdown : will append parsed markdown (see below) Any tuple , list or iterable: will add each item following previous rules from customblocks.utils import E , Markdown def mygenerator ( ctx , image ): return ( E ( '.mytype' , dict ( style = \"width: 30%; align: left\" ), E ( 'a' , dict ( href = image ), E ( 'img' , src = image ), ), Markdown ( ctx . content , ctx . parser ), ) )","title":"Hyperscript"},{"location":"defining-generators/#pageinfo","text":"utils.pageinfo.PageInfo is a class that retrieves meta information from html pages by means of its properties. Properties are computed lazily and use cache. Once you get one property for a given page, later uses will have little impact. Any attribute you explicit on the constructor will override the ones derived from actual content. info = PageInfo ( html , url = 'http://site.com/path/page.html' ) info . sitename # the name of the site (meta og:site_name or the domain info . siteicon # the favicon or similar info . siteurl # the base url of the site (not the page) info . title # page title (from og:title meta or `<title>` content) info . description # short description (from og:description or twitter:description) info . image # featured image (from og:image or twitter:image, or site image)","title":"PageInfo"},{"location":"defining-generators/#fetcher","text":"A fetcher object is a wrapper around the requests library that uses caching to avoid downloading once and again remote resource each time you compile the markdown file. The first time a resource is succesfully downloaded by a fetcher the request response is stored in the provided folder in a yaml file which has the mangled url as name. Successive tries to download it just take the content of that file to construct a query. from customblocks.utils import Fetcher fetcher = Fetcher ( 'mycachedir' ) response = fetcher . get ( 'https://canvoki.net/codder' ) # to force next call fetcher . remove ( 'https://canvoki.net/codder' )","title":"Fetcher"},{"location":"generators-admonition/","text":"Admonition ( customblocks.generators.admonition ) An admonition is a specially formatted text out of the main flow which remarks a piece of text. Often the text is placed in a box and with a side icon to identify it as that special type of text. Admonition generator is, by default, assigned to the following types: attention , caution , danger , error , hint , important , note , tip , warning . So you can write: ::: danger Do not try to do this at home In order to generate: < div class = \"admonition danger\" > < p class = \"admonition-title\" > Danger </ p > < p > Do not try to do this at home </ p > </ div > Generated code emulates the one generated by ReST admonitions (which is also emulated by markdown.extra.admonition ). So, you can benefit from existing styles and themes. With the style of this documentation, it looks like this: Danger Do not try to do this at home Options title in the title box show that text instead of the *args added as additional classes for the outter div **kwds added as attributes for the outter div content: reparsed as markdown Warning If you are migrating from extra.admonition , be careful since extra identifies title because the quotes, while customblocks will take the first parameter as title and next values as additional classes. If you like having the classes before, you should explicit especify title key. ::: danger blinking title=\"Super danger\" Do **not** try to do this at home Styling You can use the recommended style . Since most themes in generation environments (Pelican, mkdocs...) have already styles for admonitions, it might work without that css (just like this documentation) which is using mkdocs defaults. Examples ::: note This is a note ::: note \"Custom note title\" style=\"border-width: 3pt; border-radius: 10pt\" This is a note with customized style and title, and rich **markdown** - item - item ::: important This is important ::: warning This is a warning ::: caution This is a caution ::: attention Something to be attended ::: danger This is a danger ::: error This is a error ::: hint This is a hint ::: tip This is a tip Note This is a note Custom note title This is a note with customized style and title, and rich markdown item item Important This is important Warning This is a warning Caution This is a caution Attention Something to be attended Danger This is a danger Error This is a error Hint This is a hint Tip This is a tip","title":"Admonition"},{"location":"generators-admonition/#admonition-customblocksgeneratorsadmonition","text":"An admonition is a specially formatted text out of the main flow which remarks a piece of text. Often the text is placed in a box and with a side icon to identify it as that special type of text. Admonition generator is, by default, assigned to the following types: attention , caution , danger , error , hint , important , note , tip , warning . So you can write: ::: danger Do not try to do this at home In order to generate: < div class = \"admonition danger\" > < p class = \"admonition-title\" > Danger </ p > < p > Do not try to do this at home </ p > </ div > Generated code emulates the one generated by ReST admonitions (which is also emulated by markdown.extra.admonition ). So, you can benefit from existing styles and themes. With the style of this documentation, it looks like this: Danger Do not try to do this at home","title":"Admonition (customblocks.generators.admonition)"},{"location":"generators-admonition/#options","text":"title in the title box show that text instead of the *args added as additional classes for the outter div **kwds added as attributes for the outter div content: reparsed as markdown Warning If you are migrating from extra.admonition , be careful since extra identifies title because the quotes, while customblocks will take the first parameter as title and next values as additional classes. If you like having the classes before, you should explicit especify title key. ::: danger blinking title=\"Super danger\" Do **not** try to do this at home","title":"Options"},{"location":"generators-admonition/#styling","text":"You can use the recommended style . Since most themes in generation environments (Pelican, mkdocs...) have already styles for admonitions, it might work without that css (just like this documentation) which is using mkdocs defaults.","title":"Styling"},{"location":"generators-admonition/#examples","text":"::: note This is a note ::: note \"Custom note title\" style=\"border-width: 3pt; border-radius: 10pt\" This is a note with customized style and title, and rich **markdown** - item - item ::: important This is important ::: warning This is a warning ::: caution This is a caution ::: attention Something to be attended ::: danger This is a danger ::: error This is a error ::: hint This is a hint ::: tip This is a tip Note This is a note Custom note title This is a note with customized style and title, and rich markdown item item Important This is important Warning This is a warning Caution This is a caution Attention Something to be attended Danger This is a danger Error This is a error Hint This is a hint Tip This is a tip","title":"Examples"},{"location":"generators-container/","text":"Container ( customblocks.generators.container ) This generator is the default one used when a type has no generator associated. It generates a <div> element with the typename as class. It also appends any positional parameter as additional classes and keyword arguments as attributes. The content is reinterpreted as markdown. This is quite useful to create a 'div' structure in the html document. Options *args added as additional classes for the outter div **kwds added as attributes for the outter div content: reparsed as markdown Example The following example: ::: sidebar left style=\"width: 30em\" ::: widget # Social ... ::: widget # Related ... Renders as: < div class = 'sidebar left' style = \"width: 30em\" > < div class = 'widget' > < h1 > Social </ h1 > < p > ... </ p > </ div > < div class = 'widget' > < h1 > Related </ h1 > < p > ... </ p > </ div > </ div >","title":"Container"},{"location":"generators-container/#container-customblocksgeneratorscontainer","text":"This generator is the default one used when a type has no generator associated. It generates a <div> element with the typename as class. It also appends any positional parameter as additional classes and keyword arguments as attributes. The content is reinterpreted as markdown. This is quite useful to create a 'div' structure in the html document.","title":"Container (customblocks.generators.container)"},{"location":"generators-container/#options","text":"*args added as additional classes for the outter div **kwds added as attributes for the outter div content: reparsed as markdown","title":"Options"},{"location":"generators-container/#example","text":"The following example: ::: sidebar left style=\"width: 30em\" ::: widget # Social ... ::: widget # Related ... Renders as: < div class = 'sidebar left' style = \"width: 30em\" > < div class = 'widget' > < h1 > Social </ h1 > < p > ... </ p > </ div > < div class = 'widget' > < h1 > Related </ h1 > < p > ... </ p > </ div > </ div >","title":"Example"},{"location":"generators-facebook/","text":"Facebook ( customblocks.generators.facebook ) Embeds a Facebook post. Page id and post id are the mandatory parameters for this component. You can find them from the post url, obtained by clicking on the post date. The url has the form: https://www.facebook.com/{pageid}/posts/{postid} Warning Generated code will include user tracking from Facebook. User browser might, wisely, block the embed. A privacy safe version of this plugin is planned for the future. Options page Page (or user) id post Post code. You can obtain it from the url the post date points to. Should be a public post in order to work. width (keyword only, default 500) embed width (must be between 350 and 750) Example ::: facebook DesconexionIBEX35 pfbid0DXwq1fVjC7RRHjxqCevvrCuMaihZoSixKpJpUFxBQGGCPFEBGdkiKWYtZx4A6fGRl ::: facebook lovokmon 10160236064339354 height=200 ::: facebook width=350 DesconexionIBEX35 pfbid0DXwq1fVjC7RRHjxqCevvrCuMaihZoSixKpJpUFxBQGGCPFEBGdkiKWYtZx4A6fGRl TODO Obtain post information on static generation time and build a privacy safe place holder","title":"Facebook"},{"location":"generators-facebook/#facebook-customblocksgeneratorsfacebook","text":"Embeds a Facebook post. Page id and post id are the mandatory parameters for this component. You can find them from the post url, obtained by clicking on the post date. The url has the form: https://www.facebook.com/{pageid}/posts/{postid} Warning Generated code will include user tracking from Facebook. User browser might, wisely, block the embed. A privacy safe version of this plugin is planned for the future.","title":"Facebook (customblocks.generators.facebook)"},{"location":"generators-facebook/#options","text":"page Page (or user) id post Post code. You can obtain it from the url the post date points to. Should be a public post in order to work. width (keyword only, default 500) embed width (must be between 350 and 750)","title":"Options"},{"location":"generators-facebook/#example","text":"::: facebook DesconexionIBEX35 pfbid0DXwq1fVjC7RRHjxqCevvrCuMaihZoSixKpJpUFxBQGGCPFEBGdkiKWYtZx4A6fGRl ::: facebook lovokmon 10160236064339354 height=200 ::: facebook width=350 DesconexionIBEX35 pfbid0DXwq1fVjC7RRHjxqCevvrCuMaihZoSixKpJpUFxBQGGCPFEBGdkiKWYtZx4A6fGRl","title":"Example"},{"location":"generators-facebook/#todo","text":"Obtain post information on static generation time and build a privacy safe place holder","title":"TODO"},{"location":"generators-figure/","text":"Figure ( customblocks.generators.figure ) An image as captioned figure. The content is taken as caption. Options url the url to the image alt (keyword only) image alt attribute title (keyword only) image title attribute lightbox (bool) if true, on click, the image will open in a lightbox instead of a new tab which is the default *args additional classes for root <figure> tag **kwds additional attributes for root <figure> tag Styling A figure css is provided. The lightbox mode relies heavily on this css in order to work without using javascript. Examples ::: figure https://www.w3schools.com/howto/img_lights.jpg alt='an image' nice This is a **nice** image. Renders into: < figure class = \"nice\" > < a href = \"https://www.w3schools.com/howto/img_lights.jpg\" target = \"_blank\" > < img src = \"https://www.w3schools.com/howto/img_lights.jpg\" alt = \"an image\" /> </ a > < figcaption > < p > This is a < b > nice </ b > image </ p > </ figcaption > </ figure > This is a nice image. The lightbox option generates a slighty different markup: :::figure lightbox https://www.w3schools.com/howto/img_lights.jpg pull-right style=\"width:40%\" what a gorgeus image < figure class = \"lightbox\" id = \"fafb8273-ef7c-47b4-a31f-57d9e0387fc1\" style = \"width:40%\" > < a class = \"lightbox-background\" href = \"javascript:history.back()\" ></ a > < a href = \"#fafb8273-ef7c-47b4-a31f-57d9e0387fc1\" > < img src = \"https://www.w3schools.com/howto/img_snow.jpg\" /> </ a > < figcaption > < p > what a gorgeus image </ p > </ figcaption > </ figure > what a gorgeus image TODO (you can help!) global settings to avoid changing every figure figure enumeration (\"Figure N:\") thumbnails fetch external images to make them local css for placement classes (left, centered, right...) improve css","title":"Figure"},{"location":"generators-figure/#figure-customblocksgeneratorsfigure","text":"An image as captioned figure. The content is taken as caption.","title":"Figure (customblocks.generators.figure)"},{"location":"generators-figure/#options","text":"url the url to the image alt (keyword only) image alt attribute title (keyword only) image title attribute lightbox (bool) if true, on click, the image will open in a lightbox instead of a new tab which is the default *args additional classes for root <figure> tag **kwds additional attributes for root <figure> tag","title":"Options"},{"location":"generators-figure/#styling","text":"A figure css is provided. The lightbox mode relies heavily on this css in order to work without using javascript.","title":"Styling"},{"location":"generators-figure/#examples","text":"::: figure https://www.w3schools.com/howto/img_lights.jpg alt='an image' nice This is a **nice** image. Renders into: < figure class = \"nice\" > < a href = \"https://www.w3schools.com/howto/img_lights.jpg\" target = \"_blank\" > < img src = \"https://www.w3schools.com/howto/img_lights.jpg\" alt = \"an image\" /> </ a > < figcaption > < p > This is a < b > nice </ b > image </ p > </ figcaption > </ figure > This is a nice image. The lightbox option generates a slighty different markup: :::figure lightbox https://www.w3schools.com/howto/img_lights.jpg pull-right style=\"width:40%\" what a gorgeus image < figure class = \"lightbox\" id = \"fafb8273-ef7c-47b4-a31f-57d9e0387fc1\" style = \"width:40%\" > < a class = \"lightbox-background\" href = \"javascript:history.back()\" ></ a > < a href = \"#fafb8273-ef7c-47b4-a31f-57d9e0387fc1\" > < img src = \"https://www.w3schools.com/howto/img_snow.jpg\" /> </ a > < figcaption > < p > what a gorgeus image </ p > </ figcaption > </ figure > what a gorgeus image","title":"Examples"},{"location":"generators-figure/#todo-you-can-help","text":"global settings to avoid changing every figure figure enumeration (\"Figure N:\") thumbnails fetch external images to make them local css for placement classes (left, centered, right...) improve css","title":"TODO (you can help!)"},{"location":"generators-goteo/","text":"Goteo ( customblocks.generators.goteo ) Embeds a Goteo fund raising campaign widget. Options id The id of the project Example ::: goteo lo-nuestro-es-de-verdad","title":"Goteo"},{"location":"generators-goteo/#goteo-customblocksgeneratorsgoteo","text":"Embeds a Goteo fund raising campaign widget.","title":"Goteo (customblocks.generators.goteo)"},{"location":"generators-goteo/#options","text":"id The id of the project","title":"Options"},{"location":"generators-goteo/#example","text":"::: goteo lo-nuestro-es-de-verdad","title":"Example"},{"location":"generators-instagram/","text":"Instagram ( customblocks.generators.instagram ) Embeds an Instagram post. You can find the post url by clicking on the three dots and Go to post . The url usually has the form: https://www.instagram.com/p/{post}/ Warning Generated code will include user tracking from Facebook. User browser might, wisely, block the embed. A privacy safe version of this plugin is planned for the future. Options post post id you can retrieve from the url when showing the caption/nocaption (flag, keyword only, default true) if true show the caption and the comments *args any keyless argument will turn into additional classes for the outer element **kwds any keyword argument will turn into additional attributes for the outer element Styling For styling purposes, upper element can be selected with blockquote.instagram-media . Examples ::: instagram CkYZbEhIgjS nocaption Instagram post embedding not available. Watch it on Instagram ::: instagram CkYZbEhIgjS Instagram post embedding not available. Watch it on Instagram ::: instagram CkYZbEhIgjS nocaption style=\"width: 100%\" Instagram post embedding not available. Watch it on Instagram TODOs Privacy friendly version","title":"Instagram"},{"location":"generators-instagram/#instagram-customblocksgeneratorsinstagram","text":"Embeds an Instagram post. You can find the post url by clicking on the three dots and Go to post . The url usually has the form: https://www.instagram.com/p/{post}/ Warning Generated code will include user tracking from Facebook. User browser might, wisely, block the embed. A privacy safe version of this plugin is planned for the future.","title":"Instagram (customblocks.generators.instagram)"},{"location":"generators-instagram/#options","text":"post post id you can retrieve from the url when showing the caption/nocaption (flag, keyword only, default true) if true show the caption and the comments *args any keyless argument will turn into additional classes for the outer element **kwds any keyword argument will turn into additional attributes for the outer element","title":"Options"},{"location":"generators-instagram/#styling","text":"For styling purposes, upper element can be selected with blockquote.instagram-media .","title":"Styling"},{"location":"generators-instagram/#examples","text":"::: instagram CkYZbEhIgjS nocaption Instagram post embedding not available. Watch it on Instagram ::: instagram CkYZbEhIgjS Instagram post embedding not available. Watch it on Instagram ::: instagram CkYZbEhIgjS nocaption style=\"width: 100%\" Instagram post embedding not available. Watch it on Instagram","title":"Examples"},{"location":"generators-instagram/#todos","text":"Privacy friendly version","title":"TODOs"},{"location":"generators-linkcard/","text":"Link card ( customblocks.generators.linkcard ) A link card is a informative box about an external source. It is similar to the card that popular apps like Wordpress, Facebook, Twitter, Telegram, Slack... generate when you embed/post a link. In order to build the box, the generator downloads the target url and extracts social metadata : Featured image, title, description... The download page is cached so that first non-failing download will avoid further downloads. ::: linkcard https://css-tricks.com/essential-meta-tags-social-media/ The Essential Meta Tags for Social Media | CSS-Tricks These days, almost every website encourages visitors to share its pages on social media. We\u2019ve all seen the ubiquitous Facebook and Twitter icons, among Read more CSS-TRICKS This generator uses the fetcher helper. Thus, the first fetch will be cached for later generations. Options url The url to embed as card wideimage (bool, default True) Whether the featured image will be shown wide, if not, a small thumb will be shown Additionally you can provide the following keyword parameters to override information extracted from the url: image : the image heading the card title : the caption description : the text describing the link (though using content is recommended) siteurl : a link to the main site sitename : the name of the main site siteicon : the site icon Content, if provided will be used as excerpt instead of the summary in the page. Styling The above example uses this css . Examples ::: linkcard nowideimage https://css-tricks.com/essential-meta-tags-social-media/ The Essential Meta Tags for Social Media | CSS-Tricks These days, almost every website encourages visitors to share its pages on social media. We\u2019ve all seen the ubiquitous Facebook and Twitter icons, among Read more CSS-TRICKS TODO Global default options Improve the css layout Image placeholder while loading Display author metadata Support Mediawiki excerpts","title":"Linkcard"},{"location":"generators-linkcard/#link-card-customblocksgeneratorslinkcard","text":"A link card is a informative box about an external source. It is similar to the card that popular apps like Wordpress, Facebook, Twitter, Telegram, Slack... generate when you embed/post a link. In order to build the box, the generator downloads the target url and extracts social metadata : Featured image, title, description... The download page is cached so that first non-failing download will avoid further downloads. ::: linkcard https://css-tricks.com/essential-meta-tags-social-media/ The Essential Meta Tags for Social Media | CSS-Tricks These days, almost every website encourages visitors to share its pages on social media. We\u2019ve all seen the ubiquitous Facebook and Twitter icons, among Read more CSS-TRICKS This generator uses the fetcher helper. Thus, the first fetch will be cached for later generations.","title":"Link card (customblocks.generators.linkcard)"},{"location":"generators-linkcard/#options","text":"url The url to embed as card wideimage (bool, default True) Whether the featured image will be shown wide, if not, a small thumb will be shown Additionally you can provide the following keyword parameters to override information extracted from the url: image : the image heading the card title : the caption description : the text describing the link (though using content is recommended) siteurl : a link to the main site sitename : the name of the main site siteicon : the site icon Content, if provided will be used as excerpt instead of the summary in the page.","title":"Options"},{"location":"generators-linkcard/#styling","text":"The above example uses this css .","title":"Styling"},{"location":"generators-linkcard/#examples","text":"::: linkcard nowideimage https://css-tricks.com/essential-meta-tags-social-media/ The Essential Meta Tags for Social Media | CSS-Tricks These days, almost every website encourages visitors to share its pages on social media. We\u2019ve all seen the ubiquitous Facebook and Twitter icons, among Read more CSS-TRICKS","title":"Examples"},{"location":"generators-linkcard/#todo","text":"Global default options Improve the css layout Image placeholder while loading Display author metadata Support Mediawiki excerpts","title":"TODO"},{"location":"generators-map/","text":"Map ( customblocks.generators.map ) Embeds a map for the specified location. Currently, OSM services are used both for geolocation during generation time and and the embed in browsing time. Options location The location to display in the map marker / nomarker (bool, default True) Whether to show or not the location with a marker Examples ::: map \"City of London\" nomarker ::: map \"Lanteira\" ::: map \"Pa\u00efsos catalans\" ::: map \"Germany\"","title":"Map"},{"location":"generators-map/#map-customblocksgeneratorsmap","text":"Embeds a map for the specified location. Currently, OSM services are used both for geolocation during generation time and and the embed in browsing time.","title":"Map (customblocks.generators.map)"},{"location":"generators-map/#options","text":"location The location to display in the map marker / nomarker (bool, default True) Whether to show or not the location with a marker","title":"Options"},{"location":"generators-map/#examples","text":"::: map \"City of London\" nomarker ::: map \"Lanteira\" ::: map \"Pa\u00efsos catalans\" ::: map \"Germany\"","title":"Examples"},{"location":"generators-twitter/","text":"Twitter ( customblocks.generators.twitter ) Embeds a tweet in a privacy safe way. Example ::: twitter votomitico 1193240526373507072 heme=dark lang=es track=true Para que no te encuentres sorpresas y evitar malos entendidos, estas son todas las papeletas al congreso que te encontraras en la mesa. https://t.co/CteAknu7AW \u2014 Mitos electorales (@votomitico) November 9, 2019 Options user : the user that wrote the tweet tweet the tweet id (a long number) theme (optional, default light ) It can be either dark or light hideimages Do not show attached images in the embedded align left , center or right conversation whether to add or not the full thread","title":"Twitter"},{"location":"generators-twitter/#twitter-customblocksgeneratorstwitter","text":"Embeds a tweet in a privacy safe way.","title":"Twitter (customblocks.generators.twitter)"},{"location":"generators-twitter/#example","text":"::: twitter votomitico 1193240526373507072 heme=dark lang=es track=true Para que no te encuentres sorpresas y evitar malos entendidos, estas son todas las papeletas al congreso que te encontraras en la mesa. https://t.co/CteAknu7AW \u2014 Mitos electorales (@votomitico) November 9, 2019","title":"Example"},{"location":"generators-twitter/#options","text":"user : the user that wrote the tweet tweet the tweet id (a long number) theme (optional, default light ) It can be either dark or light hideimages Do not show attached images in the embedded align left , center or right conversation whether to add or not the full thread","title":"Options"},{"location":"generators-verkami/","text":"Verkami ( customblocks.generators.verkami ) Embeds a Verkami fund raising campaign widget. Options id The id of the project (can be the number or the full id) landscape (Flag, default False) instead of a portrait widget generate a landscape one Example ::: verkami 34131-breve-viaje-por-la-espana-de-las-brujas ::: verkami 26588 landscape","title":"Verkami"},{"location":"generators-verkami/#verkami-customblocksgeneratorsverkami","text":"Embeds a Verkami fund raising campaign widget.","title":"Verkami (customblocks.generators.verkami)"},{"location":"generators-verkami/#options","text":"id The id of the project (can be the number or the full id) landscape (Flag, default False) instead of a portrait widget generate a landscape one","title":"Options"},{"location":"generators-verkami/#example","text":"::: verkami 34131-breve-viaje-por-la-espana-de-las-brujas ::: verkami 26588 landscape","title":"Example"},{"location":"generators-vimeo/","text":"Vimeo ( customblocks.generators.vimeo ) This generator generates an embeded vimeo video. Example ::: vimeo 139579122 Options autoplay (flag, default False) starts the video as soon as it is loaded loop (flag, default False) restart again the video once finished bylabel (flag, default True) Shows the video author's name portrait (flag, default False) Shows the video author's avatar *args added as additional class for the outter div **kwds added as attributes for the outter div Content is ignored.","title":"Vimeo"},{"location":"generators-vimeo/#vimeo-customblocksgeneratorsvimeo","text":"This generator generates an embeded vimeo video.","title":"Vimeo (customblocks.generators.vimeo)"},{"location":"generators-vimeo/#example","text":"::: vimeo 139579122","title":"Example"},{"location":"generators-vimeo/#options","text":"autoplay (flag, default False) starts the video as soon as it is loaded loop (flag, default False) restart again the video once finished bylabel (flag, default True) Shows the video author's name portrait (flag, default False) Shows the video author's avatar *args added as additional class for the outter div **kwds added as attributes for the outter div Content is ignored.","title":"Options"},{"location":"generators-youtube/","text":"Youtube ( customblocks.generators.youtube ) This generator generates an embeded youtube video. Example ::: youtube HUBNt18RFbo < div class = \"videowrapper youtube\" > < iframe src = \"https://www.youtube-nocookie.com/embed/HUBNt18RFbo\" ></ iframe > </ div > Warning Even though, youtube-nocookie.com is suposed to avoid tracing cookies, google sets some tracing cookies from one of the included javascript files. Options autoplay (flag, default False) starts the video as soon as it is loaded loop (flag, default False) restart again the video once finished controls (flag, default True) show the controls *args added as additional class for the outter div **kwds added as attributes for the outter div Indented content is ignored. Or you could set youtube_inlineFluidStyle config to True and the style will be added inline to every video. Styling The component can be selected as div.videowrapper.youtube . Note that the videowrapper class is common with other video embeds and has a recommended css .","title":"Youtube"},{"location":"generators-youtube/#youtube-customblocksgeneratorsyoutube","text":"This generator generates an embeded youtube video.","title":"Youtube (customblocks.generators.youtube)"},{"location":"generators-youtube/#example","text":"::: youtube HUBNt18RFbo < div class = \"videowrapper youtube\" > < iframe src = \"https://www.youtube-nocookie.com/embed/HUBNt18RFbo\" ></ iframe > </ div > Warning Even though, youtube-nocookie.com is suposed to avoid tracing cookies, google sets some tracing cookies from one of the included javascript files.","title":"Example"},{"location":"generators-youtube/#options","text":"autoplay (flag, default False) starts the video as soon as it is loaded loop (flag, default False) restart again the video once finished controls (flag, default True) show the controls *args added as additional class for the outter div **kwds added as attributes for the outter div Indented content is ignored. Or you could set youtube_inlineFluidStyle config to True and the style will be added inline to every video.","title":"Options"},{"location":"generators-youtube/#styling","text":"The component can be selected as div.videowrapper.youtube . Note that the videowrapper class is common with other video embeds and has a recommended css .","title":"Styling"},{"location":"inspiration/","text":"Inspiration This extension has been inspired by several existing software and other markdown extensions. LaTeX macros I wanted to implement something i had in LaTeX. The ability to create repeating content by defining a parametrized code. LaTeX macros are hard to write and very hard to deal with errors, but they are still a quite cool tool once you have them working. So, having that with Python and Markdown should be simpler and cooler. Python Using identation as syntactic element to generate structure is a pythonic think. Sure. Having both keyword and positional parameters is also a Pythonic thing, although this extension is more flexible in the order of providing them. Superfences Superfences extension lets you extend and define your own type of fences and then make them do things beyond what fences are suposed to do, formating code. I used the idea of having different types of blocks you can define the behaviour within the same common syntax. Despite that, that common syntax was not enough to have parameters and it was hard to define sub blocks. Also you are abusing a construct that is suposed to be used for code. Admonitions Admonitions extension lets you define divs with classes and nest them if you want. This is quite useful to structure your html, despite the fact you can only control html attributes. I like the idea of using indent to nest admonitions and reparsing the content as markdown again is a strategy i also took for this extension. Sadly, this extension just renders the output in one way, a div with a title div. The only chance you have to change the output is by using css or js. Container Containers generates more direct html than admonitions (no title). But instead using indentation, it uses closing tag. This syntax is hard to follow when you have several nested items. Other extensions Structured Markdown Youtube extensions Video-to-Markdown","title":"Inspiration"},{"location":"inspiration/#inspiration","text":"This extension has been inspired by several existing software and other markdown extensions.","title":"Inspiration"},{"location":"inspiration/#latex-macros","text":"I wanted to implement something i had in LaTeX. The ability to create repeating content by defining a parametrized code. LaTeX macros are hard to write and very hard to deal with errors, but they are still a quite cool tool once you have them working. So, having that with Python and Markdown should be simpler and cooler.","title":"LaTeX macros"},{"location":"inspiration/#python","text":"Using identation as syntactic element to generate structure is a pythonic think. Sure. Having both keyword and positional parameters is also a Pythonic thing, although this extension is more flexible in the order of providing them.","title":"Python"},{"location":"inspiration/#superfences","text":"Superfences extension lets you extend and define your own type of fences and then make them do things beyond what fences are suposed to do, formating code. I used the idea of having different types of blocks you can define the behaviour within the same common syntax. Despite that, that common syntax was not enough to have parameters and it was hard to define sub blocks. Also you are abusing a construct that is suposed to be used for code.","title":"Superfences"},{"location":"inspiration/#admonitions","text":"Admonitions extension lets you define divs with classes and nest them if you want. This is quite useful to structure your html, despite the fact you can only control html attributes. I like the idea of using indent to nest admonitions and reparsing the content as markdown again is a strategy i also took for this extension. Sadly, this extension just renders the output in one way, a div with a title div. The only chance you have to change the output is by using css or js.","title":"Admonitions"},{"location":"inspiration/#container","text":"Containers generates more direct html than admonitions (no title). But instead using indentation, it uses closing tag. This syntax is hard to follow when you have several nested items.","title":"Container"},{"location":"inspiration/#other-extensions","text":"Structured Markdown","title":"Other extensions"},{"location":"inspiration/#youtube-extensions","text":"Video-to-Markdown","title":"Youtube extensions"},{"location":"motivation/","text":"Motivation This text explains the motivation to write this extension and the rationale under the design decissions. Many custom objects like figures, video embeds... have no native markup in Markdown. You could hardcode them as HTML or you could also use an extension for that. Hardcoding HTML has a clear drawback: Besides cluttering the markdown with HTML, whenever we need to upgrade the block, because you found a better way of embeding videos or whatever, you have to change that code in many places. Extensions avoid the HTML clutter, but, still they are not useful to upgrade your blocks. Usually improving a block means moving to a different extension, with more features. But extensions, in order to avoid collisions, tend to be creative on the markup they use, even if they cover the same function. So if you migrate to a more powerfull extension, you end up editing all your blocks again. Another motivation is that coding an extension is hard. Markdown extension API is necessarily complex to address many scenarios. But this extension responds just to this single but quite general scenario: I want to generate this piece of HTML which depends on those parameters and might include a given content . So... Why using a common markup for that many different structures? This way, markup syntax explosion is avoided, and users do not have to learn a new syntax. Also, developing new block types is easier if you can reuse the same parser. Why using a type name to identify the structure? A name, as part of the markup, clarifies the block meaning on reading. Also provides a hook to change the behaviour while keeping the semantics. If you do not like the predefined generator for a given type, you can provide a new generator with your extended features. Why defining a common attribute markup? A common attribute markup is useful to stablish a general mapping between markup attributes and Python function parameters. The signature of the generator function defines the attributes that can be used and the extension does the mapping with no extra glue required. Why using indentation to indicate inner content? It visually shows the scope of the block and allows nesting. If the content is reparsed as Markdown, it could still include other components with their inner content a level deeper. Why functions as means for extension? Well, it is simpler than having class interfaces, and Python introspection helps a lot to do the parameter mapping.","title":"Motivation and design choices"},{"location":"motivation/#motivation","text":"This text explains the motivation to write this extension and the rationale under the design decissions. Many custom objects like figures, video embeds... have no native markup in Markdown. You could hardcode them as HTML or you could also use an extension for that. Hardcoding HTML has a clear drawback: Besides cluttering the markdown with HTML, whenever we need to upgrade the block, because you found a better way of embeding videos or whatever, you have to change that code in many places. Extensions avoid the HTML clutter, but, still they are not useful to upgrade your blocks. Usually improving a block means moving to a different extension, with more features. But extensions, in order to avoid collisions, tend to be creative on the markup they use, even if they cover the same function. So if you migrate to a more powerfull extension, you end up editing all your blocks again. Another motivation is that coding an extension is hard. Markdown extension API is necessarily complex to address many scenarios. But this extension responds just to this single but quite general scenario: I want to generate this piece of HTML which depends on those parameters and might include a given content . So... Why using a common markup for that many different structures? This way, markup syntax explosion is avoided, and users do not have to learn a new syntax. Also, developing new block types is easier if you can reuse the same parser. Why using a type name to identify the structure? A name, as part of the markup, clarifies the block meaning on reading. Also provides a hook to change the behaviour while keeping the semantics. If you do not like the predefined generator for a given type, you can provide a new generator with your extended features. Why defining a common attribute markup? A common attribute markup is useful to stablish a general mapping between markup attributes and Python function parameters. The signature of the generator function defines the attributes that can be used and the extension does the mapping with no extra glue required. Why using indentation to indicate inner content? It visually shows the scope of the block and allows nesting. If the content is reparsed as Markdown, it could still include other components with their inner content a level deeper. Why functions as means for extension? Well, it is simpler than having class interfaces, and Python introspection helps a lot to do the parameter mapping.","title":"Motivation"}]}